무결성
	데이터의 정확성, 일관성, 유효성이 유지되는 것.

	정확성: 데이터는 애매하지 않아야 한다.
	일관성: 각 사용자가 일관된 데이터를 볼 수 있도록 해야한다.
	유효성: 데이터가 실제 존재하는 데이터여야 한다.

1. 개체 무결성(개체와 객체는 다름. 개체: 테이블 하나하나, 테이블 각각)
	모든 테이블이 PK로 선택된 컬럼을 가져야 한다.

2. 참조 무결성(FK, relashion)
	두 테이블의 데이터가 항상 일관된 값을 가지도록 유지하는 것.

3. 도메인(COLUMN) 무결성
	컬럼의 타입, NULL값의 허용 등에 대한 사항을 정의하고
	올바른 데이터가 입력되었는지를 확인하는 것.

-----------------------------------------------------------------------------------------------------------------
모델링(기획)
	추상적인 주제를 DB에 맞게 설계하는 것


1. 요구사항 분석
	회원, 주문, 상품 : 3가지를 모두 관리하고 싶습니다.

2. 개념적 설계(개념 모델링)
	회원		주문		상품

	회원 번호		주문번호		상품번호
	회원 아이디	주문 날짜		상품 이름	
	회원 비밀번호	회원 번호		상품 가격
	회원 이름		상품 번호		상품 재고
	회원 주소		주문 개수
	회원 이메일
	회원 생일
	회원 핸드폰 번호

3. 논리적 설계(논리 모델링)
	회원		주문		상품

	회원 번호PK	주문번호PK	상품번호PK
	회원 아이디UK	주문 날짜	NN	상품 이름	NN
	회원 비밀번호NN	회원 번호	FK	상품 가격NN
	회원 이름	NN	상품 번호	FK	상품 재고NN
	회원 주소	NN	주문 개수C, D(1)
	회원 이메일UK
	회원 생일
	회원 핸드폰 번호UK


4. 물리적 설계(물리 모델링)
	TBL_MEMBER		주문		상품
	----------------------------------------------
	MEMBER_ID : NUMBER PK_MEMBER PRIMARY KEY
	---------------------------------------------
	MEMBER_IDENTIFICATION : VARCHAR2 NOT NULL UNIQUE
	MEMBER_PASSWORD : VARCHAR2 NOT NULL
	MEMBER_NAME : VARCHAR2 NOT NULL
	MEMBER_ADDRESS : VARCHAR2 NOT NULL
	MEMBER_EMAIL : VARCHAR2 NOT NULL UNIQUE
	MEMBER_BIRTH : DATE
	MEMBER_PHONE : VARCHAR2 NOT NULL UNIQUE

5. 구현
--------------------------------------------------------------------------------------------------------
1.  요구사항 분석
	꽃 테이블과 화분 테이블 두개가 필요하고, O
	꽃을 구매할 때 화분도 같이 구매합니다.
	꽃은 이름과 색상, 가격이 있고, O 
	화분은 제품번호, 색상, 모양이 있습니다. O
	화분은 모든 꽃을 담을 수 없고 맞는 꽃들을 담아야 합니다. FK 

2. 개념적 설계(개념 모델링)
	꽃	화분

	이름	제품 번호
	색상	색상
	가격	모양
	번호	꽃 이름



3. 논리적 설계(논리 모델링)

	꽃		화분
	----------------------------------------------
	꽃 번호PK	제품 번호PK
	이름NN		색상C(3),
	색상C(3),		모양NN
	가격NN		꽃 번호,FK

* 조합키: 하나의 pk에 2개 이상의 컬럼이 조합된 형태 ex) 꽃 이름 색상

4. 물리적 설계(물리 모델링)

	TBL_FLOWER		
	----------------------------------------------
	FLOWER_ID : NUMBER, PK
	FLOWER_IDNAME : VARCHAR2, NOT NULL
	FLOWER_COLOR(3) VARCHAR2, NOT NULL CHECK(3) 
	FLOWER_PRICE : NUMBER, NOT NULL

	TBL_FLOWERPOT
	----------------------------------------------
	FLOWERPOT_ID : NUMBER, PK
	FLOWERPOT_COLOR : VARCHAR, NOT NULL
	FLOWERPOT_SHAPE : VARCHAR, NOT NULL
	FLOWER_ID : NUMBER, FK

5. 구현




<조합키VER>
/*
 * 자동차
 * 
 * - 자동차 번호
 * - 자동차 브랜드
 * - 출시 날짜
 * - 색상
 * - 가격
 * 
 * */
CREATE TABLE TBL_CAR(
   CAR_ID NUMBER,
   CAR_BRAND VARCHAR2(1000),
   CAR_RELEASE_DATE DATE,
   CAR_COLOR VARCHAR2(1000),
   CAR_PRICE NUMBER,
   CONSTRAINT PK_CAR PRIMARY KEY(CAR_ID)
);

CREATE TABLE TBL_CAR(
   CAR_ID NUMBER PRIMARY KEY,
   CAR_BRAND VARCHAR2(1000),
   CAR_RELEASE_DATE DATE,
   CAR_COLOR VARCHAR2(1000),
   CAR_PRICE NUMBER
);

CREATE TABLE TBL_CAR(
   CAR_ID NUMBER CONSTRAINT PK_CAR PRIMARY KEY,
   CAR_BRAND VARCHAR2(1000),
   CAR_RELEASE_DATE DATE,
   CAR_COLOR VARCHAR2(1000),
   CAR_PRICE NUMBER
);

DROP TABLE TBL_CAR;

ALTER TABLE TBL_CAR DROP CONSTRAINT PK_CAR;
ALTER TABLE TBL_CAR ADD CONSTRAINT PK_CAR PRIMARY KEY(CAR_ID);

/*
 * 동물 테이블 생성
 * 
 * - 고유 번호
 * - 종류
 * - 나이
 * - 먹이
 * 
 * */

CREATE TABLE TBL_ANIMAL(
   ANIMAL_ID NUMBER CONSTRAINT PK_ANIMAL PRIMARY KEY,
   ANIMAL_TYPE VARCHAR2(1000),
   ANIMAL_AGE NUMBER,
   ANIMAL_FEED_NAME VARCHAR2(1000)
);

CREATE TABLE TBL_ANIMAL(
   ANIMAL_ID NUMBER,
   ANIMAL_TYPE VARCHAR2(1000),
   ANIMAL_AGE NUMBER,
   ANIMAL_FEED_NAME VARCHAR2(1000),
   CONSTRAINT PK_ANIMAL PRIMARY KEY(ANIMAL_ID)
);

ALTER TABLE TBL_ANIMAL DROP CONSTRAINT PK_ANIMAL;
ALTER TABLE TBL_ANIMAL ADD CONSTRAINT PK_ANIMAL PRIMARY KEY(ANIMAL_ID);


DROP TABLE TBL_ANIMAL;

/*
 * 학생 테이블 생성
 * 
 * - 학생 번호
 * - 학생 아이디
 * - 학생 이름
 * - 전공
 * - 성별
 * - 생년월일
 * - 학생 나이 NOT NULL, DEFAULT는 생년월일로 계산된 나이, 19보다 커야한다
 * - 학생 학점(A+ ~ F) 'A+', 'A', 'B+', 'B', 'C+', 'C', 'D+', 'D', 'F'
 * 
 * */

CREATE TABLE TBL_STUDENT(
   STUDENT_ID NUMBER CONSTRAINT PK_STUDENT PRIMARY KEY,
   STUDENT_IDENTIFICATION VARCHAR2(1000) CONSTRAINT UK_STUDENT UNIQUE,
   STUDENT_NAME VARCHAR2(1000) CONSTRAINT REQUIER_NAME NOT NULL,
   STUDENT_MAJOR VARCHAR2(1000) CONSTRAINT REQUIER_MAJOR NOT NULL,
   STUDENT_GENDER CHAR(1) DEFAULT 'N' CONSTRAINT BAN_CHAR CHECK(STUDENT_GENDER IN('M','F','N')) CONSTRAINT REQUIER_GENDER NOT NULL,
   STUDENT_BIRTH DATE CONSTRAINT BAN_DATE CHECK(STUDENT_BIRTH >= TO_DATE('1985-01-01', 'YYYY-MM-DD')) CONSTRAINT REQUIER_BIRTH NOT NULL
);

/*학생 아이디는 NULL을 허용하지 않는다. NOT NULL 제약 조건은 추가가 아닌 수정으로 한다.*/
ALTER TABLE TBL_STUDENT MODIFY STUDENT_IDENTIFICATION CONSTRAINT REQUIER_IDENTIFICATION NOT NULL;
/*제약조건의 이름을 설정하지 않으면 시스템 이름으로 설정되기 때문에 지우고 다시 이름을 붙여주는 것이 좋다.*/
ALTER TABLE TBL_STUDENT DROP CONSTRAINT SYS_C007014;
/*기존 BAN_CHAR 제약조건을 없앤다.*/
ALTER TABLE TBL_STUDENT DROP CONSTRAINT BAN_CHAR;
/*BAN_CHAR 제약조건을 추가한다. 성별에는 M, W, N 이외의 문자가 들어가지 못하게 한다.*/
ALTER TABLE TBL_STUDENT ADD CONSTRAINT BAN_CHAR CHECK(STUDENT_GENDER IN ('M','W','N'));
/*DEFAULT 제약조건은 추가가 아닌 수정으로 진행하며, 학생 성별에 W를 기본 값으로 설정한다.*/
ALTER TABLE TBL_STUDENT MODIFY STUDENT_GENDER DEFAULT 'W';
/*학생 나이 컬럼 추가*/
ALTER TABLE TBL_STUDENT ADD(STUDENT_AGE NUMBER);
/*학생 학점 컬럼 추가*/
ALTER TABLE TBL_STUDENT ADD(STUDENT_GRADE VARCHAR2(10));
/*학생 나이는 필수 요소로서 NULL을 허용하지 않는다.*/
ALTER TABLE TBL_STUDENT MODIFY STUDENT_AGE CONSTRAINT REQUIER_AGE NOT NULL;
/*학생 나이는 19세가 넘어야 된다.*/
ALTER TABLE TBL_STUDENT ADD CONSTRAINT CHECK_AGE CHECK(STUDENT_AGE > 19);
/*DEFAULT 제약조건에 다른 컬럼의 값을 가져와 연산할 수 없다. INSERT 또는 다른 언어로 처리해야 한다.*/
/*ALTER TABLE TBL_STUDENT MODIFY STUDENT_AGE DEFAULT TRUNC((SYSDATE - STUDENT_BIRTH) / 365);*/
/*학생 학점은 IN절에 작성된 문자만 사용 가능하다.*/
/*COLUMN IN(A, B, C) => COLUMN = A OR COLUMN = B OR COLUMN = C*/
ALTER TABLE TBL_STUDENT ADD CONSTRAINT BAN_GRADE CHECK(STUDENT_GRADE IN('A+', 'A', 'B+', 'B', 'C+', 'C', 'D+', 'D', 'F'));

/*조합 키
 * 
 * 하나의 PK에 2개 이상의 컬럼이 조합된 형태
 * 
 * */

/*
 * 
 * TBL_FLOWER
   ---------------------------------
   FLOWER_NAME : VARCHAR2 PK_FLOWER
   FLOWER_COLOR : VARCHAR2 PK_FLOWER
   ---------------------------------
   FLOWER_PRICE : NUMBER NOT NULL


   TBL_POT
   ---------------------------------
   POT_ID : NUMBER PK_POT
   ---------------------------------
   POT_COLOR : VARCHAR2 NOT NULL
   POT_SHAPE : VARCHAR2 NOT NULL
   FLOWER_NAME : VARCHAR2 FOREIGN KEY NOT NULL
   FLOWER_COLOR : VARCHAR2 FOREIGN KEY NOT NULL
 * 
 * */























